{"ast":null,"code":"import Dialogs from './Dialogs';\nimport { sendMessageCreator, updateNewMessageBodyCreator } from '../../redux/dialogs-reducer';\n// import { sendMessageCreator, updateNewMessageBodyCreator } from '../../redux/store';\n// import StoreContext from '../../StoreContext';\nimport { connect } from 'react-redux';\n\n// connect() позволяет нам забыть про store. Мы теперь пользуемся state.\n// state = store.getState() \n\n// Функция превращающая state (данные оттуда) в props. \n// Прилюбых измениях в state запускается эта функция\nlet mapStateToProps = state => {\n  return {\n    dialogsPage: state.dialogsPage //  в props Dialogs попадет  dialogsPage\n  };\n};\n\n// Функция превращающая state (callback оттуда) в props. \nlet mapDispatchToProps = dispatch => {\n  return {\n    updateNewMessageBody: body => {\n      // в props Dialogs попадет updateNewMessageBody\n      dispatch(updateNewMessageBodyCreator(body));\n    },\n    sendMessage: () => {\n      // в props Dialogs попадет sendMessag\n      dispatch(sendMessageCreator());\n    }\n  };\n};\n\n// connect() возвращает новую контейнерную компоненту, которая внутри рендерит презентационную компоненту, внутрь презентационной компоненты в качестве props передает те свойства, которые сидят в объектах, которые ретурнит mapStateToProp, mapDispatchToProp.Настраиваем данными функциями connect.\n// Dialogs законнектится к store по правилам connect()\n// Dialogs перерисуется, если изменится объект state.dialogsPage\n\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs);\nexport default DialogsContainer;","map":{"version":3,"names":["Dialogs","sendMessageCreator","updateNewMessageBodyCreator","connect","mapStateToProps","state","dialogsPage","mapDispatchToProps","dispatch","updateNewMessageBody","body","sendMessage","DialogsContainer"],"sources":["C:/Users/szhivtsova/education/projects/01-first-project/social-network-react/src/components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["import Dialogs from './Dialogs';\r\nimport { sendMessageCreator, updateNewMessageBodyCreator } from '../../redux/dialogs-reducer'; \r\n// import { sendMessageCreator, updateNewMessageBodyCreator } from '../../redux/store';\r\n// import StoreContext from '../../StoreContext';\r\nimport { connect } from 'react-redux';\r\n\r\n// connect() позволяет нам забыть про store. Мы теперь пользуемся state.\r\n// state = store.getState() \r\n\r\n// Функция превращающая state (данные оттуда) в props. \r\n// Прилюбых измениях в state запускается эта функция\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage //  в props Dialogs попадет  dialogsPage\r\n    }\r\n}\r\n\r\n// Функция превращающая state (callback оттуда) в props. \r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateNewMessageBody: (body) => { // в props Dialogs попадет updateNewMessageBody\r\n            dispatch(updateNewMessageBodyCreator(body));\r\n        },\r\n        sendMessage: () => { // в props Dialogs попадет sendMessag\r\n            dispatch(sendMessageCreator());\r\n        }\r\n    }\r\n}\r\n\r\n// connect() возвращает новую контейнерную компоненту, которая внутри рендерит презентационную компоненту, внутрь презентационной компоненты в качестве props передает те свойства, которые сидят в объектах, которые ретурнит mapStateToProp, mapDispatchToProp.Настраиваем данными функциями connect.\r\n// Dialogs законнектится к store по правилам connect()\r\n// Dialogs перерисуется, если изменится объект state.dialogsPage\r\n\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps) (Dialogs);\r\n\r\nexport default DialogsContainer;"],"mappings":"AAAA,OAAOA,OAAO,MAAM,WAAW;AAC/B,SAASC,kBAAkB,EAAEC,2BAA2B,QAAQ,6BAA6B;AAC7F;AACA;AACA,SAASC,OAAO,QAAQ,aAAa;;AAErC;AACA;;AAEA;AACA;AACA,IAAIC,eAAe,GAAIC,KAAK,IAAK;EAC7B,OAAO;IACHC,WAAW,EAAED,KAAK,CAACC,WAAW,CAAC;EACnC,CAAC;AACL,CAAC;;AAED;AACA,IAAIC,kBAAkB,GAAIC,QAAQ,IAAK;EACnC,OAAO;IACHC,oBAAoB,EAAGC,IAAI,IAAK;MAAE;MAC9BF,QAAQ,CAACN,2BAA2B,CAACQ,IAAI,CAAC,CAAC;IAC/C,CAAC;IACDC,WAAW,EAAE,MAAM;MAAE;MACjBH,QAAQ,CAACP,kBAAkB,EAAE,CAAC;IAClC;EACJ,CAAC;AACL,CAAC;;AAED;AACA;AACA;;AAEA,MAAMW,gBAAgB,GAAGT,OAAO,CAACC,eAAe,EAAEG,kBAAkB,CAAC,CAAEP,OAAO,CAAC;AAE/E,eAAeY,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}