{"ast":null,"code":"const FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\n\n// Объект, передаваемый в качестве первоначального значения (скопировали из store.js -> _state -> profilePage)\nlet initialState = {\n  users: [],\n  pageSize: 5,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: true\n};\n\n// Инициализируем начальное значение с помощью параметров по умолчанию state = initialState\n\nconst usersReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  // debugger\n  switch (action.type) {\n    case FOLLOW:\n      return {\n        ...state,\n        users: state.users.map(user => {\n          if (user.id === action.userId) {\n            return {\n              ...user,\n              followed: true\n            }; // копия пользователя\n          }\n\n          return user;\n        })\n      };\n    case UNFOLLOW:\n      return {\n        ...state,\n        users: state.users.map(user => {\n          if (user.id === action.userId) {\n            return {\n              ...user,\n              followed: false\n            };\n          }\n          return user;\n        })\n      };\n    case SET_USERS:\n      {\n        return {\n          ...state,\n          // users: [...state.users, ...action.users ]} // заменяем имеющихся пользователей на тех, что пришли с сервера, перезатирая весь массив users\n          users: action.users\n        };\n      }\n    case SET_CURRENT_PAGE:\n      {\n        return {\n          ...state,\n          currentPage: action.currentPage\n        };\n      }\n    case SET_TOTAL_USERS_COUNT:\n      {\n        return {\n          ...state,\n          totalUsersCount: action.count\n        };\n      }\n    case TOGGLE_IS_FETCHING:\n      {\n        return {\n          ...state,\n          isFetching: action.isFetching // isFetching в action берется из toggleIsFetchingActionCreator\n        };\n      }\n\n    default:\n      return state;\n  }\n};\nexport const follow = userId => ({\n  type: FOLLOW,\n  userId\n});\nexport const unfollow = userId => ({\n  type: UNFOLLOW,\n  userId\n});\nexport const setUsers = users => ({\n  type: SET_USERS,\n  users\n}); // users приходят с сервера\nexport const setCurrentPage = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage\n});\nexport const setTotalUsersCount = totalUsersCount => ({\n  type: SET_TOTAL_USERS_COUNT,\n  count: totalUsersCount\n});\nexport const toggleIsFetching = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\nexport default usersReducer;","map":{"version":3,"names":["FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","usersReducer","state","action","type","map","user","id","userId","followed","count","follow","unfollow","setUsers","setCurrentPage","setTotalUsersCount","toggleIsFetching"],"sources":["C:/Users/szhivtsova/education/projects/01-first-project/social-network-react/src/redux/users-reducer.js"],"sourcesContent":["const FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\n\r\n// Объект, передаваемый в качестве первоначального значения (скопировали из store.js -> _state -> profilePage)\r\nlet initialState = {\r\n    users: [ ],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true\r\n};\r\n\r\n// Инициализируем начальное значение с помощью параметров по умолчанию state = initialState\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n    // debugger\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => {\r\n                    if (user.id === action.userId) {\r\n                        return { ...user, followed: true }; // копия пользователя\r\n                    }\r\n                    return user;\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => {\r\n                    if (user.id === action.userId) {\r\n                        return { ...user, followed: false };\r\n                    }\r\n                    return user;\r\n                })\r\n            }\r\n        case SET_USERS: {\r\n            return { \r\n                ...state,\r\n                // users: [...state.users, ...action.users ]} // заменяем имеющихся пользователей на тех, что пришли с сервера, перезатирая весь массив users\r\n                users: action.users\r\n            }\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage,\r\n            }\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.count,\r\n            }\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching, // isFetching в action берется из toggleIsFetchingActionCreator\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport const follow = (userId) => ({ type: FOLLOW, userId })\r\nexport const unfollow = (userId) => ({ type: UNFOLLOW, userId })\r\nexport const setUsers = (users) => ({ type: SET_USERS, users }) // users приходят с сервера\r\nexport const setCurrentPage = (currentPage) => ({ type: SET_CURRENT_PAGE, currentPage })\r\nexport const setTotalUsersCount = (totalUsersCount) => ({ type: SET_TOTAL_USERS_COUNT, count: totalUsersCount })\r\nexport const toggleIsFetching = (isFetching) => ({ type: TOGGLE_IS_FETCHING, isFetching })\r\n\r\n\r\nexport default usersReducer;"],"mappings":"AAAA,MAAMA,MAAM,GAAG,QAAQ;AACvB,MAAMC,QAAQ,GAAG,UAAU;AAC3B,MAAMC,SAAS,GAAG,WAAW;AAC7B,MAAMC,gBAAgB,GAAG,kBAAkB;AAC3C,MAAMC,qBAAqB,GAAG,uBAAuB;AACrD,MAAMC,kBAAkB,GAAG,oBAAoB;;AAE/C;AACA,IAAIC,YAAY,GAAG;EACfC,KAAK,EAAE,EAAG;EACVC,QAAQ,EAAE,CAAC;EACXC,eAAe,EAAE,CAAC;EAClBC,WAAW,EAAE,CAAC;EACdC,UAAU,EAAE;AAChB,CAAC;;AAED;;AAEA,MAAMC,YAAY,GAAG,YAAkC;EAAA,IAAjCC,KAAK,uEAAGP,YAAY;EAAA,IAAEQ,MAAM;EAC9C;EACA,QAAQA,MAAM,CAACC,IAAI;IACf,KAAKf,MAAM;MACP,OAAO;QACH,GAAGa,KAAK;QACRN,KAAK,EAAEM,KAAK,CAACN,KAAK,CAACS,GAAG,CAACC,IAAI,IAAI;UAC3B,IAAIA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAACK,MAAM,EAAE;YAC3B,OAAO;cAAE,GAAGF,IAAI;cAAEG,QAAQ,EAAE;YAAK,CAAC,CAAC,CAAC;UACxC;;UACA,OAAOH,IAAI;QACf,CAAC;MACL,CAAC;IACL,KAAKhB,QAAQ;MACT,OAAO;QACH,GAAGY,KAAK;QACRN,KAAK,EAAEM,KAAK,CAACN,KAAK,CAACS,GAAG,CAACC,IAAI,IAAI;UAC3B,IAAIA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAACK,MAAM,EAAE;YAC3B,OAAO;cAAE,GAAGF,IAAI;cAAEG,QAAQ,EAAE;YAAM,CAAC;UACvC;UACA,OAAOH,IAAI;QACf,CAAC;MACL,CAAC;IACL,KAAKf,SAAS;MAAE;QACZ,OAAO;UACH,GAAGW,KAAK;UACR;UACAN,KAAK,EAAEO,MAAM,CAACP;QAClB,CAAC;MACL;IACA,KAAKJ,gBAAgB;MAAE;QACnB,OAAO;UACH,GAAGU,KAAK;UACRH,WAAW,EAAEI,MAAM,CAACJ;QACxB,CAAC;MACL;IACA,KAAKN,qBAAqB;MAAE;QACxB,OAAO;UACH,GAAGS,KAAK;UACRJ,eAAe,EAAEK,MAAM,CAACO;QAC5B,CAAC;MACL;IACA,KAAKhB,kBAAkB;MAAE;QACrB,OAAO;UACH,GAAGQ,KAAK;UACRF,UAAU,EAAEG,MAAM,CAACH,UAAU,CAAE;QACnC,CAAC;MACL;;IACA;MACI,OAAOE,KAAK;EAAC;AAGzB,CAAC;AAED,OAAO,MAAMS,MAAM,GAAIH,MAAM,KAAM;EAAEJ,IAAI,EAAEf,MAAM;EAAEmB;AAAO,CAAC,CAAC;AAC5D,OAAO,MAAMI,QAAQ,GAAIJ,MAAM,KAAM;EAAEJ,IAAI,EAAEd,QAAQ;EAAEkB;AAAO,CAAC,CAAC;AAChE,OAAO,MAAMK,QAAQ,GAAIjB,KAAK,KAAM;EAAEQ,IAAI,EAAEb,SAAS;EAAEK;AAAM,CAAC,CAAC,EAAC;AAChE,OAAO,MAAMkB,cAAc,GAAIf,WAAW,KAAM;EAAEK,IAAI,EAAEZ,gBAAgB;EAAEO;AAAY,CAAC,CAAC;AACxF,OAAO,MAAMgB,kBAAkB,GAAIjB,eAAe,KAAM;EAAEM,IAAI,EAAEX,qBAAqB;EAAEiB,KAAK,EAAEZ;AAAgB,CAAC,CAAC;AAChH,OAAO,MAAMkB,gBAAgB,GAAIhB,UAAU,KAAM;EAAEI,IAAI,EAAEV,kBAAkB;EAAEM;AAAW,CAAC,CAAC;AAG1F,eAAeC,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}