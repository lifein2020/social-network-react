{"ast":null,"code":"const ADD_POST = 'ADD-POST';\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\n\n// Объект, передаваемый в качестве первоначального значения (скопировали из store.js -> _state -> profilePage)\nlet initialState = {\n  posts: [{\n    id: 1,\n    message: 'Hello! How are you?',\n    likesCount: 7\n  }, {\n    id: 2,\n    message: 'It\\'s time to go snowboarding! Who goes with me?',\n    likesCount: 9\n  }, {\n    id: 3,\n    message: 'Aloha! I\\'m on Havai!',\n    likesCount: 7\n  }],\n  newPostText: \"Samurai way\"\n};\n\n// Инициализируем начальное значение с помощью параметров по умолчанию state = initialState\n\nconst profileReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  // более грамотный способ копирования\n  // let stateCopy = {\n  //     ...state, // поверхностная копия state ===  let stateCopy = {...state};\n  //     posts: [...state.posts] // меняется объект posts(пушаться новые посты) => делаем его копию ===  stateCopy.posts = [...state.posts];\n  // }\n\n  // debugger\n  switch (action.type) {\n    case ADD_POST:\n      {\n        // фигурные кавычки, т.к. stateCopy в каждом свой\n        let newPost = {\n          id: 5,\n          message: state.newPostText,\n          likesCount: 0\n        };\n        // 1 способ\n        return {\n          ...state,\n          posts: [...state.posts, newPost],\n          newPostText: ''\n        };\n        //  2 способ\n        // сначала делаем копию объекта\n        // let stateCopy = {...state};  // поверхностная копия (shadoy), не копирует объекты(массивы) внутри объекта\n        // stateCopy.posts = [...state.posts]; // глубокая копия - копия массива внутри объекта, делаем чтобы посты в массиве поменять\n        // // потом изменяем в копии данные\n        // stateCopy.posts.push(newPost);  \n        // stateCopy.newPostText = ''; \n        // return stateCopy; // если action не изменил state, вместо breack\n      }\n\n    case UPDATE_NEW_POST_TEXT:\n      {\n        // 1 способ\n        return {\n          ...state,\n          newPostText: action.newText\n        };\n\n        //  2 способ\n        // let stateCopy = {...state}; // копия предыдущей копии (stateCopy) \n        // stateCopy.newPostText = action.newText; // примитив, глубокая копия не нужна => в этой копии остается ссылка на массив предыдущей копии \n        // return stateCopy;\n      }\n\n    default:\n      return state;\n  }\n};\nexport const addPostActionCreator = () => ({\n  type: ADD_POST\n});\nexport const updateNewPostTextActionCreator = text => ({\n  type: UPDATE_NEW_POST_TEXT,\n  newText: text\n});\nexport default profileReducer;","map":{"version":3,"names":["ADD_POST","UPDATE_NEW_POST_TEXT","initialState","posts","id","message","likesCount","newPostText","profileReducer","state","action","type","newPost","newText","addPostActionCreator","updateNewPostTextActionCreator","text"],"sources":["C:/Users/szhivtsova/education/projects/01-first-project/social-network-react/src/redux/profile-reducer.js"],"sourcesContent":["const ADD_POST = 'ADD-POST';\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\r\n\r\n// Объект, передаваемый в качестве первоначального значения (скопировали из store.js -> _state -> profilePage)\r\nlet initialState = {\r\n    posts: [\r\n        { id: 1, message: 'Hello! How are you?', likesCount: 7 },\r\n        { id: 2, message: 'It\\'s time to go snowboarding! Who goes with me?', likesCount: 9 },\r\n        { id: 3, message: 'Aloha! I\\'m on Havai!', likesCount: 7 },\r\n    ],\r\n    newPostText: \"Samurai way\",\r\n};\r\n\r\n// Инициализируем начальное значение с помощью параметров по умолчанию state = initialState\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n\r\n    // более грамотный способ копирования\r\n    // let stateCopy = {\r\n    //     ...state, // поверхностная копия state ===  let stateCopy = {...state};\r\n    //     posts: [...state.posts] // меняется объект posts(пушаться новые посты) => делаем его копию ===  stateCopy.posts = [...state.posts];\r\n    // }\r\n\r\n    // debugger\r\n    switch (action.type) {\r\n        case ADD_POST: { // фигурные кавычки, т.к. stateCopy в каждом свой\r\n            let newPost = {\r\n                id: 5,\r\n                message: state.newPostText,\r\n                likesCount: 0\r\n            };\r\n            // 1 способ\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: '',\r\n            }\r\n            //  2 способ\r\n            // сначала делаем копию объекта\r\n            // let stateCopy = {...state};  // поверхностная копия (shadoy), не копирует объекты(массивы) внутри объекта\r\n            // stateCopy.posts = [...state.posts]; // глубокая копия - копия массива внутри объекта, делаем чтобы посты в массиве поменять\r\n            // // потом изменяем в копии данные\r\n            // stateCopy.posts.push(newPost);  \r\n            // stateCopy.newPostText = ''; \r\n            // return stateCopy; // если action не изменил state, вместо breack\r\n        }\r\n\r\n        case UPDATE_NEW_POST_TEXT: {\r\n            // 1 способ\r\n            return {\r\n                ...state,\r\n                newPostText: action.newText,\r\n            }\r\n\r\n            //  2 способ\r\n            // let stateCopy = {...state}; // копия предыдущей копии (stateCopy) \r\n            // stateCopy.newPostText = action.newText; // примитив, глубокая копия не нужна => в этой копии остается ссылка на массив предыдущей копии \r\n            // return stateCopy;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport const addPostActionCreator = () => ({ type: ADD_POST })\r\nexport const updateNewPostTextActionCreator = (text) => (\r\n    { type: UPDATE_NEW_POST_TEXT, newText: text }\r\n)\r\n\r\n\r\nexport default profileReducer;"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,UAAU;AAC3B,MAAMC,oBAAoB,GAAG,sBAAsB;;AAEnD;AACA,IAAIC,YAAY,GAAG;EACfC,KAAK,EAAE,CACH;IAAEC,EAAE,EAAE,CAAC;IAAEC,OAAO,EAAE,qBAAqB;IAAEC,UAAU,EAAE;EAAE,CAAC,EACxD;IAAEF,EAAE,EAAE,CAAC;IAAEC,OAAO,EAAE,kDAAkD;IAAEC,UAAU,EAAE;EAAE,CAAC,EACrF;IAAEF,EAAE,EAAE,CAAC;IAAEC,OAAO,EAAE,uBAAuB;IAAEC,UAAU,EAAE;EAAE,CAAC,CAC7D;EACDC,WAAW,EAAE;AACjB,CAAC;;AAED;;AAEA,MAAMC,cAAc,GAAG,YAAkC;EAAA,IAAjCC,KAAK,uEAAGP,YAAY;EAAA,IAAEQ,MAAM;EAEhD;EACA;EACA;EACA;EACA;;EAEA;EACA,QAAQA,MAAM,CAACC,IAAI;IACf,KAAKX,QAAQ;MAAE;QAAE;QACb,IAAIY,OAAO,GAAG;UACVR,EAAE,EAAE,CAAC;UACLC,OAAO,EAAEI,KAAK,CAACF,WAAW;UAC1BD,UAAU,EAAE;QAChB,CAAC;QACD;QACA,OAAO;UACH,GAAGG,KAAK;UACRN,KAAK,EAAE,CAAC,GAAGM,KAAK,CAACN,KAAK,EAAES,OAAO,CAAC;UAChCL,WAAW,EAAE;QACjB,CAAC;QACD;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACJ;;IAEA,KAAKN,oBAAoB;MAAE;QACvB;QACA,OAAO;UACH,GAAGQ,KAAK;UACRF,WAAW,EAAEG,MAAM,CAACG;QACxB,CAAC;;QAED;QACA;QACA;QACA;MACJ;;IACA;MACI,OAAOJ,KAAK;EAAC;AAGzB,CAAC;AAED,OAAO,MAAMK,oBAAoB,GAAG,OAAO;EAAEH,IAAI,EAAEX;AAAS,CAAC,CAAC;AAC9D,OAAO,MAAMe,8BAA8B,GAAIC,IAAI,KAC/C;EAAEL,IAAI,EAAEV,oBAAoB;EAAEY,OAAO,EAAEG;AAAK,CAAC,CAChD;AAGD,eAAeR,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}