{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\szhivtsova\\\\education\\\\projects\\\\01-first-project\\\\social-network-react\\\\src\\\\components\\\\Header\\\\HeaderContainer.jsx\";\nimport React from 'react';\nimport Header from './Header';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { setAuthUserData } from '../../redux/auth-reducer';\nimport { authAPI } from '../../api/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass HeaderContainer extends React.Component {\n  componentDidMount() {\n    // this.props.toggleIsFetching(true);\n    authAPI.me()\n    // перенесли в api.js\n    // axios.get(`https://social-network.samuraijs.com/api/1.0/auth/me`, { // запрос чтобы понять кто мы, залогинены или нет\n    //     withCredentials: true // этот параметр get запроса - настройки запроса. Если пользователь был ранее залогинен на сайте https://social-network.samuraijs.com, то информация об этом сохранилась в куки того браузера, через который логинился. При запросе на сервер отправляется кука с информацией о логине.\n    // })\n    .then(response => {\n      //debugger // смотрим в F12 что в response.data.message, response.data.resultCode\n      if (response.data.resultCode === 0) {\n        let {\n          id,\n          email,\n          login\n        } = response.data.data; // деструктуризация\n        this.props.setAuthUserData(id, email, login); // проверить что пришло F12 -> Console -> store.getState().auth\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Header, {\n      ...this.props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 16\n    }, this);\n  }\n}\nconst mapStateToProps = state => ({\n  isAuth: state.auth.isAuth,\n  login: state.auth.login\n});\nexport default connect(mapStateToProps, {\n  setAuthUserData\n})(HeaderContainer);","map":{"version":3,"names":["React","Header","axios","connect","setAuthUserData","authAPI","HeaderContainer","Component","componentDidMount","me","then","response","data","resultCode","id","email","login","props","render","mapStateToProps","state","isAuth","auth"],"sources":["C:/Users/szhivtsova/education/projects/01-first-project/social-network-react/src/components/Header/HeaderContainer.jsx"],"sourcesContent":["import React from 'react';\r\nimport Header from './Header';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport {setAuthUserData} from '../../redux/auth-reducer';\r\nimport { authAPI } from '../../api/api';\r\n\r\nclass HeaderContainer extends React.Component {\r\n    componentDidMount() {\r\n        // this.props.toggleIsFetching(true);\r\n        authAPI.me()\r\n        // перенесли в api.js\r\n        // axios.get(`https://social-network.samuraijs.com/api/1.0/auth/me`, { // запрос чтобы понять кто мы, залогинены или нет\r\n        //     withCredentials: true // этот параметр get запроса - настройки запроса. Если пользователь был ранее залогинен на сайте https://social-network.samuraijs.com, то информация об этом сохранилась в куки того браузера, через который логинился. При запросе на сервер отправляется кука с информацией о логине.\r\n        // })\r\n            .then(response => {\r\n       //debugger // смотрим в F12 что в response.data.message, response.data.resultCode\r\n                if (response.data.resultCode === 0) {\r\n                    let { id, email, login } = response.data.data; // деструктуризация\r\n                    this.props.setAuthUserData(id, email, login ); // проверить что пришло F12 -> Console -> store.getState().auth\r\n                }\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n});\r\n\r\nexport default connect (mapStateToProps, {setAuthUserData} ) (HeaderContainer);\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,aAAa;AACrC,SAAQC,eAAe,QAAO,0BAA0B;AACxD,SAASC,OAAO,QAAQ,eAAe;AAAC;AAExC,MAAMC,eAAe,SAASN,KAAK,CAACO,SAAS,CAAC;EAC1CC,iBAAiB,GAAG;IAChB;IACAH,OAAO,CAACI,EAAE;IACV;IACA;IACA;IACA;IAAA,CACKC,IAAI,CAACC,QAAQ,IAAI;MACvB;MACS,IAAIA,QAAQ,CAACC,IAAI,CAACC,UAAU,KAAK,CAAC,EAAE;QAChC,IAAI;UAAEC,EAAE;UAAEC,KAAK;UAAEC;QAAM,CAAC,GAAGL,QAAQ,CAACC,IAAI,CAACA,IAAI,CAAC,CAAC;QAC/C,IAAI,CAACK,KAAK,CAACb,eAAe,CAACU,EAAE,EAAEC,KAAK,EAAEC,KAAK,CAAE,CAAC,CAAC;MACnD;IACJ,CAAC,CAAC;EACV;;EAEAE,MAAM,GAAG;IACL,oBAAO,QAAC,MAAM;MAAA,GAAK,IAAI,CAACD;IAAK;MAAA;MAAA;MAAA;IAAA,QAAI;EACrC;AACJ;AAEA,MAAME,eAAe,GAAIC,KAAK,KAAM;EAChCC,MAAM,EAAED,KAAK,CAACE,IAAI,CAACD,MAAM;EACzBL,KAAK,EAAEI,KAAK,CAACE,IAAI,CAACN;AACtB,CAAC,CAAC;AAEF,eAAeb,OAAO,CAAEgB,eAAe,EAAE;EAACf;AAAe,CAAC,CAAE,CAAEE,eAAe,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}