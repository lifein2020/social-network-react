{"ast":null,"code":"const UPDATE_NEW_MESSAGE_BODY = \"UPDATE_NEW_MESSAGE_BODY\";\nconst SEND_MESSAGE = 'SEND_MESSAGE';\nlet initialState = {\n  dialogs: [{\n    id: 1,\n    name: \"Sveta\"\n  }, {\n    id: 2,\n    name: \"Pasha\"\n  }, {\n    id: 3,\n    name: \"Olya\"\n  }, {\n    id: 4,\n    name: \"Serge\"\n  }, {\n    id: 5,\n    name: \"Kolya\"\n  }],\n  messages: [{\n    id: 1,\n    message: \"Hi!\"\n  }, {\n    id: 2,\n    message: \"How are you?\"\n  }, {\n    id: 3,\n    message: \"How is your course?\"\n  }, {\n    id: 4,\n    message: \"Yo\"\n  }, {\n    id: 5,\n    message: \"Yo\"\n  }],\n  newMessagesBody: \"\"\n};\nconst dialogsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  // Если в mapStateToProps (DialogsContainer) попадают props из ветки dialogsPage\n  // Делаем копию только того, что меняем => пушим в массив messages новый элемент, т.к. сам элемент(представляем собой объект) не изменяем, то его копию не делаем.\n\n  //  не лучший способ копирования\n  // let stateCopy = { ...state };\n  // stateCopy = [...state.messages];\n\n  // более грамотный способ копирования\n  // let stateCopy = {\n  //   ...state,\n  //   messages: [...state.messages] // поверхностная копия массива стейта\n  // };\n\n  // Для каждого action своя копия state\n  let stateCopy;\n  switch (action.type) {\n    case UPDATE_NEW_MESSAGE_BODY:\n      // Здесь меняем только текст - впечатываем сообщение\n      stateCopy = {\n        ...state,\n        newMessagesBody: action.body // меняем во время созданимя копии (т.е. нового объекта)\n      };\n\n      stateCopy.newMessagesBody = action.body;\n      return stateCopy;\n    case SEND_MESSAGE:\n      // Здесь меняем массив - добавляем пост\n      stateCopy = {\n        ...state,\n        messages: [...state.messages] // поверхностная копия массива стейта\n      };\n\n      let body = stateCopy.newMessagesBody;\n      stateCopy.newMessagesBody = '';\n      stateCopy.messages.push({\n        id: 6,\n        message: body\n      });\n      return stateCopy;\n    default:\n      return state;\n  }\n};\nexport const sendMessageCreator = () => ({\n  type: SEND_MESSAGE\n});\nexport const updateNewMessageBodyCreator = body => ({\n  type: UPDATE_NEW_MESSAGE_BODY,\n  body: body\n});\nexport default dialogsReducer;","map":{"version":3,"names":["UPDATE_NEW_MESSAGE_BODY","SEND_MESSAGE","initialState","dialogs","id","name","messages","message","newMessagesBody","dialogsReducer","state","action","stateCopy","type","body","push","sendMessageCreator","updateNewMessageBodyCreator"],"sources":["C:/Users/szhivtsova/education/projects/01-first-project/social-network-react/src/redux/dialogs-reducer.js"],"sourcesContent":["const UPDATE_NEW_MESSAGE_BODY = \"UPDATE_NEW_MESSAGE_BODY\";\r\nconst SEND_MESSAGE = 'SEND_MESSAGE';\r\n\r\nlet initialState = {\r\n  dialogs: [\r\n    { id: 1, name: \"Sveta\" },\r\n    { id: 2, name: \"Pasha\" },\r\n    { id: 3, name: \"Olya\" },\r\n    { id: 4, name: \"Serge\" },\r\n    { id: 5, name: \"Kolya\" },\r\n  ],\r\n  messages: [\r\n    { id: 1, message: \"Hi!\" },\r\n    { id: 2, message: \"How are you?\" },\r\n    { id: 3, message: \"How is your course?\" },\r\n    { id: 4, message: \"Yo\" },\r\n    { id: 5, message: \"Yo\" },\r\n  ],\r\n  newMessagesBody: \"\"\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action) => {\r\n\r\n  // Если в mapStateToProps (DialogsContainer) попадают props из ветки dialogsPage\r\n  // Делаем копию только того, что меняем => пушим в массив messages новый элемент, т.к. сам элемент(представляем собой объект) не изменяем, то его копию не делаем.\r\n\r\n  //  не лучший способ копирования\r\n  // let stateCopy = { ...state };\r\n  // stateCopy = [...state.messages];\r\n\r\n  // более грамотный способ копирования\r\n  // let stateCopy = {\r\n  //   ...state,\r\n  //   messages: [...state.messages] // поверхностная копия массива стейта\r\n  // };\r\n\r\n  // Для каждого action своя копия state\r\n  let stateCopy;\r\n\r\n  switch (action.type) {\r\n    case UPDATE_NEW_MESSAGE_BODY:\r\n    // Здесь меняем только текст - впечатываем сообщение\r\n    stateCopy = {\r\n      ...state,\r\n      newMessagesBody: action.body, // меняем во время созданимя копии (т.е. нового объекта)\r\n    };\r\n    stateCopy.newMessagesBody = action.body;\r\n    return stateCopy;\r\n  \r\n    case SEND_MESSAGE:\r\n      // Здесь меняем массив - добавляем пост\r\n      stateCopy = {\r\n        ...state,\r\n        messages: [...state.messages] // поверхностная копия массива стейта\r\n      };\r\n      let body = stateCopy.newMessagesBody;\r\n      stateCopy.newMessagesBody = '';\r\n      stateCopy.messages.push({ id: 6, message: body });\r\n      return stateCopy;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n\r\n}\r\n\r\nexport const sendMessageCreator = () => ({ type: SEND_MESSAGE })\r\n\r\nexport const updateNewMessageBodyCreator = (body) => (\r\n  { type: UPDATE_NEW_MESSAGE_BODY, body: body }\r\n)\r\n\r\nexport default dialogsReducer;"],"mappings":"AAAA,MAAMA,uBAAuB,GAAG,yBAAyB;AACzD,MAAMC,YAAY,GAAG,cAAc;AAEnC,IAAIC,YAAY,GAAG;EACjBC,OAAO,EAAE,CACP;IAAEC,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAQ,CAAC,EACxB;IAAED,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAQ,CAAC,EACxB;IAAED,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAO,CAAC,EACvB;IAAED,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAQ,CAAC,EACxB;IAAED,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAQ,CAAC,CACzB;EACDC,QAAQ,EAAE,CACR;IAAEF,EAAE,EAAE,CAAC;IAAEG,OAAO,EAAE;EAAM,CAAC,EACzB;IAAEH,EAAE,EAAE,CAAC;IAAEG,OAAO,EAAE;EAAe,CAAC,EAClC;IAAEH,EAAE,EAAE,CAAC;IAAEG,OAAO,EAAE;EAAsB,CAAC,EACzC;IAAEH,EAAE,EAAE,CAAC;IAAEG,OAAO,EAAE;EAAK,CAAC,EACxB;IAAEH,EAAE,EAAE,CAAC;IAAEG,OAAO,EAAE;EAAK,CAAC,CACzB;EACDC,eAAe,EAAE;AACnB,CAAC;AAED,MAAMC,cAAc,GAAG,YAAkC;EAAA,IAAjCC,KAAK,uEAAGR,YAAY;EAAA,IAAES,MAAM;EAElD;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA,IAAIC,SAAS;EAEb,QAAQD,MAAM,CAACE,IAAI;IACjB,KAAKb,uBAAuB;MAC5B;MACAY,SAAS,GAAG;QACV,GAAGF,KAAK;QACRF,eAAe,EAAEG,MAAM,CAACG,IAAI,CAAE;MAChC,CAAC;;MACDF,SAAS,CAACJ,eAAe,GAAGG,MAAM,CAACG,IAAI;MACvC,OAAOF,SAAS;IAEhB,KAAKX,YAAY;MACf;MACAW,SAAS,GAAG;QACV,GAAGF,KAAK;QACRJ,QAAQ,EAAE,CAAC,GAAGI,KAAK,CAACJ,QAAQ,CAAC,CAAC;MAChC,CAAC;;MACD,IAAIQ,IAAI,GAAGF,SAAS,CAACJ,eAAe;MACpCI,SAAS,CAACJ,eAAe,GAAG,EAAE;MAC9BI,SAAS,CAACN,QAAQ,CAACS,IAAI,CAAC;QAAEX,EAAE,EAAE,CAAC;QAAEG,OAAO,EAAEO;MAAK,CAAC,CAAC;MACjD,OAAOF,SAAS;IAElB;MACE,OAAOF,KAAK;EAAC;AAGnB,CAAC;AAED,OAAO,MAAMM,kBAAkB,GAAG,OAAO;EAAEH,IAAI,EAAEZ;AAAa,CAAC,CAAC;AAEhE,OAAO,MAAMgB,2BAA2B,GAAIH,IAAI,KAC9C;EAAED,IAAI,EAAEb,uBAAuB;EAAEc,IAAI,EAAEA;AAAK,CAAC,CAC9C;AAED,eAAeL,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}