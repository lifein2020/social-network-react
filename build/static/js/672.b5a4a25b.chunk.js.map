{"version":3,"file":"static/js/672.b5a4a25b.chunk.js","mappings":"iJACA,OAAgB,QAAU,yBAAyB,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,0B,iBCkBpK,EAhBmB,SAAH,GAAsB,IAAhBA,EAAI,EAAJA,KACdC,EAAO,YADe,EAAFC,GAGxB,OACI,gBAAKC,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAS,UACtC,SAAC,KAAO,CAACC,GAAIJ,EAAK,SAAED,KAShC,ECTA,EANgB,SAAH,GAAqB,IAAfM,EAAO,EAAPA,QACf,OACI,gBAAKH,UAAWC,EAAAA,QAAU,SAAEE,GAEpC,E,SCwDA,EAzDgB,SAAH,GAAoE,IAA9DC,EAAW,EAAXA,YAAaC,EAAW,EAAXA,YAAaC,EAAoB,EAApBA,qBAAsBC,EAAM,EAANA,OAG3DC,EAAQJ,EAIRK,EAAkBD,EAAME,QAAQC,KAAI,SAAAC,GAAM,OAAI,SAAC,EAAU,CAACf,KAAMe,EAAOf,KAAsBE,GAAIa,EAAOb,IAAtBa,EAAOb,GAAqB,IAC9Gc,EAAmBL,EAAMM,SAASH,KAAI,SAAAR,GAAO,OAAI,SAAC,EAAO,CAACA,QAASA,EAAQA,SAAcA,EAAQJ,GAAM,IACvGgB,EAAkBP,EAAMO,gBAmB3B,OAAIR,GASD,iBAAKP,UAAWC,EAAAA,QAAU,WACtB,gBAAKD,UAAWC,EAAAA,aAAe,SAC1BQ,KAEL,iBAAKT,UAAWC,EAAAA,SAAW,WACvB,yBAAMY,KACN,4BACI,0BACI,qBAAUG,MAAOD,EACPE,SA9BL,SAACC,GACtB,IAAIC,EAAOD,EAAEE,OAAOJ,MACpBV,EAAqBa,EACzB,EA4B8BE,YAAY,0BAG1B,0BAAK,mBAAQC,QAvCJ,WAErBjB,GACJ,EAoCyD,8BAtBrC,SAAC,KAAQ,CAACH,GAAI,UA2BtC,E,2BC3BA,GAAeqB,E,OAAAA,KACXC,EAAAA,EAAAA,KApBkB,SAAChB,GACnB,MAAO,CACHJ,YAAaI,EAAMJ,YAG3B,IAGyB,SAACqB,GACtB,MAAO,CACHnB,qBAAsB,SAACa,GACnBM,GAASC,EAAAA,EAAAA,IAA4BP,GACzC,EACAd,YAAa,WACToB,GAASE,EAAAA,EAAAA,MACb,EAER,IAIIC,EAAAA,EAFJ,CAGGC,E","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__B09Q7\",\"dialog\":\"Dialogs_dialog__SJ5f9\",\"active\":\"Dialogs_active__b7igu\",\"messages\":\"Dialogs_messages__5sV63\",\"message\":\"Dialogs_message__CiRMm\"};","import s from './../Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst DialogItem = ({ name, id }) => {\r\n    let path = \"/dialogs/\" + id;\r\n\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{name}</NavLink>\r\n        </div>\r\n    )\r\n\r\n    // return (\r\n    //     <div className={s.dialog + ' ' + s.active}>\r\n    //         <NavLink to={id}>{ name }</NavLink>\r\n    //     </div>\r\n    // )\r\n}\r\n\r\nexport default DialogItem;","import s from './../Dialogs.module.css';\r\n\r\nconst Message = ({ message }) => {\r\n    return (\r\n        <div className={s.message}>{message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import s from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport { redirect, Navigate } from \"react-router-dom\";\r\n\r\nconst Dialogs = ({ dialogsPage, sendMessage, updateNewMessageBody, isAuth }) => {\r\n\r\n    // К store эта презентационная компонента не обращается\r\n    let state = dialogsPage;\r\n\r\n    // ... преобразуем в новый массив компонентов с пропсами\r\n    // там где мапится массив элементов всегода добавляем key, в качестве которого id элемента из которго получаем JSX-'элемент, чтобы эти элементы были уникальными\r\n    let dialogsElements = state.dialogs.map(dialog => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id} />);\r\n    let messagesElements = state.messages.map(message => <Message message={message.message} key={message.id} />);\r\n    let newMessagesBody = state.newMessagesBody;\r\n\r\n    let onSendMessageClick = () => {\r\n        // вызываем callback, который пришел через props, вся его логика в <DialogsContainer /> в onSendMessageClick()- если нажали на кнопку, надо отправить сообщение\r\n        sendMessage(); \r\n    }\r\n\r\n    let onNewMessageChange = (e) => {\r\n        let body = e.target.value;\r\n        updateNewMessageBody(body);\r\n    }\r\n\r\n    // alert(isAuth) // кликаем на Messages - проверяем приходит ли сюда isAuth\r\n\r\n    // Если пользовательне залогинен, то при клике на Messages, Profile перенапрвлять его на станицу, где логинятся\r\n    // react-router-dom v5\r\n    // if(isAuth == false) return <Redirect to={'/login'} />;\r\n\r\n     // react-router-dom v6\r\n     if(!isAuth) return <Navigate to={'/login'} />;\r\n     //что-то из доки\r\n    // if (!isAuth) {\r\n    //     return redirect(\"/login\");\r\n    //   }\r\n    \r\n\r\n    // рендерим\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>   \r\n                <div>\r\n                    <div>\r\n                        <textarea value={newMessagesBody}\r\n                                  onChange={onNewMessageChange}\r\n                                  placeholder=\"Enter your message\">\r\n                        </textarea>\r\n                    </div>\r\n                    <div><button onClick={onSendMessageClick}>Send</button></div>\r\n                </div>         \r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import Dialogs from './Dialogs';\r\nimport { sendMessageCreator, updateNewMessageBodyCreator } from '../../redux/dialogs-reducer'; \r\n// import { sendMessageCreator, updateNewMessageBodyCreator } from '../../redux/store';\r\n// import StoreContext from '../../StoreContext';\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\n\r\n// connect() позволяет нам забыть про store. Мы теперь пользуемся state.\r\n// state = store.getState() \r\n\r\n// Функция превращающая state (данные оттуда) в props. \r\n// Прилюбых измениях в state запускается эта функция\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage, //  в props Dialogs попадет  dialogsPage\r\n        // isAuth: state.auth.isAuth, // больше здесь не нужен -> перенесли в hoc withAuthRedirect, теперь оттуда передасться автоматически\r\n    }\r\n}\r\n\r\n// Функция превращающая state (callback оттуда) в props. \r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateNewMessageBody: (body) => { // в props Dialogs попадет updateNewMessageBody\r\n            dispatch(updateNewMessageBodyCreator(body));\r\n        },\r\n        sendMessage: () => { // в props Dialogs попадет sendMessag\r\n            dispatch(sendMessageCreator());\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n) (Dialogs);\r\n\r\n// Теперь в compose\r\n// // HOC\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);\r\n\r\n// // connect() возвращает новую контейнерную компоненту, которая внутри рендерит презентационную компоненту, внутрь презентационной компоненты в качестве props передает те свойства, которые сидят в объектах, которые ретурнит mapStateToProp, mapDispatchToProp.Настраиваем данными функциями connect.\r\n// // Dialogs законнектится к store по правилам connect()\r\n// // Dialogs перерисуется, если изменится объект state.dialogsPage\r\n\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps) (AuthRedirectComponent);\r\n\r\n// export default DialogsContainer;"],"names":["name","path","id","className","s","to","message","dialogsPage","sendMessage","updateNewMessageBody","isAuth","state","dialogsElements","dialogs","map","dialog","messagesElements","messages","newMessagesBody","value","onChange","e","body","target","placeholder","onClick","compose","connect","dispatch","updateNewMessageBodyCreator","sendMessageCreator","withAuthRedirect","Dialogs"],"sourceRoot":""}